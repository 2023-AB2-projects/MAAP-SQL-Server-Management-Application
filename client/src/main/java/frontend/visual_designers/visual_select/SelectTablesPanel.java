package frontend.visual_designers.visual_select;

import frontend.visual_designers.VisualSelectDesigner;
import lombok.Getter;
import service.CatalogManager;
import service.Config;
import service.Utility;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class SelectTablesPanel extends javax.swing.JPanel {
    @Getter
    private String databaseName;
    private List<String> tableNames;
    private List<JCheckBox> checkBoxes;
    private final ImageIcon tableIcon = Utility.resizeIcon(new ImageIcon(Config.getImagesPath() + File.separator + "table_icon_mini.png"), 30, 25);

    // References
    private VisualSelectDesigner visualSelectDesigner;

    public SelectTablesPanel() {
        initComponents();

        // Initialize variables
        this.initVariables();
    }

    private void initVariables() {
        this.checkBoxes = new ArrayList<>();
    }

    private void updateTables() {
        this.tableNames = CatalogManager.getCurrentDatabaseTableNames(databaseName);

        Font font = this.selectAllTablesBox.getFont();

        // Empty check boxes list
        this.checkBoxes.clear();

        // Empty grid layout
        this.tablesPanel.removeAll();

        // Add a label that has the table icon
        JLabel tableIconLabelAll = new JLabel();
        tableIconLabelAll.setIcon(this.tableIcon);

        // Create a panel that has the table icon and the table name
        JPanel checkBoxPanelAll = new JPanel();
        checkBoxPanelAll.setLayout(new FlowLayout());
        checkBoxPanelAll.add(tableIconLabelAll);
        checkBoxPanelAll.add(this.selectAllTablesBox);

        // Add a line border to the panel with rounder corners
        checkBoxPanelAll.setBorder(new LineBorder(new Color(102, 102, 102), 3, true));

        // Add back select all tables checkbox
        this.tablesPanel.add(checkBoxPanelAll);
        for (final String tableName : this.tableNames) {
            JCheckBox checkBox = new JCheckBox(tableName);
            checkBox.setFont(font);
            checkBox.setHorizontalAlignment(JCheckBox.CENTER);

            // Add a label that has the table icon
            JLabel tableIconLabel = new JLabel();
            tableIconLabel.setIcon(this.tableIcon);

            // Create a panel that has the table icon and the table name
            JPanel checkBoxPanel = new JPanel();
            checkBoxPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
            checkBoxPanel.add(tableIconLabel);
            checkBoxPanel.add(checkBox);

            // Add a line border to the panel with rounder corners
            checkBoxPanel.setBorder(new LineBorder(new Color(102, 102, 102), 3, true));

            // Add listener
            checkBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent event) {
                    JCheckBox checkBox = (JCheckBox) event.getSource();
                    if (checkBox.isSelected()) {
                        selectAllTablesBox.setSelected(false);
                    }
                }
            });

            // Add to panel and list
            this.tablesPanel.add(checkBoxPanel);
            this.checkBoxes.add(checkBox);
        }
    }

    public void updateDatabase(String databaseName) {
        this.databaseName = databaseName;
        this.updateTables();
    }

    public void setVisualSelectDesigner(VisualSelectDesigner visualSelectDesigner) { this.visualSelectDesigner = visualSelectDesigner; }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        explainerScrollPanel = new javax.swing.JScrollPane();
        explainerTextArea = new javax.swing.JTextArea();
        doneButton = new javax.swing.JButton();
        tablesPanel = new javax.swing.JPanel();
        selectAllTablesBox = new javax.swing.JCheckBox();
        listText = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1000, 850));

        explainerTextArea.setEditable(false);
        explainerTextArea.setColumns(20);
        explainerTextArea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        explainerTextArea.setRows(5);
        explainerTextArea.setText("Welcome to the Visual Select Designer, where we help you design your queries in a simple fasion!\n\nPlease select atleast one table before pressing the 'Done' button.\nAfter pressing the done button you will be presented with another panel, where you can choose what\nfields your SELECT will have from which tables, you can rename fields, add conditions to them and much more!");
        explainerTextArea.setFocusable(false);
        explainerScrollPanel.setViewportView(explainerTextArea);

        doneButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        doneButton.setText("Done");
        doneButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        doneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                doneButtonMousePressed(evt);
            }
        });
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        tablesPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tablesPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablesPanel.setLayout(new java.awt.GridLayout(6, 2));

        selectAllTablesBox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectAllTablesBox.setSelected(true);
        selectAllTablesBox.setText("* (Every table)");
        selectAllTablesBox.setBorder(null);
        selectAllTablesBox.setBorderPainted(true);
        selectAllTablesBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectAllTablesBox.setOpaque(true);
        selectAllTablesBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectAllTablesBoxItemStateChanged(evt);
            }
        });
        tablesPanel.add(selectAllTablesBox);

        listText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        listText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listText.setText("List of tables in current database:");
        listText.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        listText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tablesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(explainerScrollPanel))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(437, 437, 437)
                .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(444, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(explainerScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doneButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllTablesBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectAllTablesBoxItemStateChanged
        // If all is selected -> Check off every other one
        if (this.selectAllTablesBox.isSelected()) {
            this.checkBoxes.forEach((checkbox) -> checkbox.setSelected(false));
        }
    }//GEN-LAST:event_selectAllTablesBoxItemStateChanged

    private void doneButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneButtonMousePressed
        List<String> selectedTableNames = new ArrayList<>();

        // Check if 'all tables' checkbox is selected
        if (this.selectAllTablesBox.isSelected()) {
            // Pass all the table names to selector panel
            selectedTableNames = this.tableNames;
        } else {
            // Iterate over all checkboxes and see which are checked
            int ind = 0;
            for (final JCheckBox checkBox : this.checkBoxes) {
                // If checked -> Add table name
                if(checkBox.isSelected()) {
                    selectedTableNames.add(this.tableNames.get(ind));
                }
                ind++;
            }

        }

        // If at least one table is selected
        if (selectedTableNames.size() > 0) {
            // Check if all of them can be joined
            // All the tables can be joined if every table has at least one foreign key pointing to tables
            // or a foreign key that is pointing to it
            if (SelectMainPanel.canTablesBeJoined(this.databaseName, selectedTableNames)) {
                this.visualSelectDesigner.switchToSelectorPanel(this.databaseName, selectedTableNames);
            } else {
                String errorMessage = "Tables can't be joined together!";
                JOptionPane.showMessageDialog(new JFrame(), errorMessage, "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_doneButtonMousePressed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doneButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doneButton;
    private javax.swing.JScrollPane explainerScrollPanel;
    private javax.swing.JTextArea explainerTextArea;
    private javax.swing.JLabel listText;
    private javax.swing.JCheckBox selectAllTablesBox;
    private javax.swing.JPanel tablesPanel;
    // End of variables declaration//GEN-END:variables
}
