package frontend.visual_designers.visual_select;

import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

public class SelectMainPanel extends javax.swing.JPanel {
    private String databaseName;
    private List<SelectTableFieldsPanel> tableFieldsPanels;

    public SelectMainPanel() {
        initComponents();
        
        this.initVariables();
    }

    private void initVariables() {
        this.tableFieldsPanels = new ArrayList<>();

        // Make first two columns of table not editable
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Field Name", "Table Name", "Alias", "Condition"}, 0)
        {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make first two columns not editable
                return column != 0 && column != 1;
            }
        };
        this.fieldSelectorTable.setModel(model);
    }

    public void update(String databaseName, List<String> tableNames) {
        // Update database name
        this.databaseName = databaseName;

        // Empty current list of panels and create new ones
        this.tableFieldsPanels.clear();
        this.tableSelectorsPanel.removeAll();

        // Create new panels
        int count = 0;
        for (final String tableName : tableNames) {
            // Create panel object and set reference
            SelectTableFieldsPanel panel = new SelectTableFieldsPanel(databaseName, tableName);
            panel.setMainPanel(this);

            // Add to list and panel
            this.tableFieldsPanels.add(panel);
            this.tableSelectorsPanel.add(panel);
            count++;

            // A max of 6 tables are supported
            if (count >= 6) break;
        }

        this.tableSelectorsPanel.revalidate();
        this.tableSelectorsPanel.repaint();
    }

    /* Setters */
    public void fieldIsSelected(String tableName, String fieldName) {
        // Add field into table if it doesn't exist yet
        for(int row = 0; row < this.fieldSelectorTable.getRowCount(); ++row) {
            // Get field and table name
            String currentFieldName = (String) this.fieldSelectorTable.getValueAt(row, 0);
            String currentTableName = (String) this.fieldSelectorTable.getValueAt(row, 1);

            // Check if it's already in table
            if (tableName.equals(currentTableName) && fieldName.equals(currentFieldName)) return;
        }

        // It's not in table yet -> Insert
        DefaultTableModel tableModel = (DefaultTableModel) this.fieldSelectorTable.getModel();
        tableModel.addRow(new Object[]{
                fieldName, tableName
        });
    }

    public void fieldIsDeselected(String tableName, String fieldName) {
        // Get model
        DefaultTableModel tableModel = (DefaultTableModel) this.fieldSelectorTable.getModel();

        // Remove field in table if it exists
        for(int row = 0; row < this.fieldSelectorTable.getRowCount(); ++row) {
            // Get field and table name
            String currentFieldName = (String) this.fieldSelectorTable.getValueAt(row, 0);
            String currentTableName = (String) this.fieldSelectorTable.getValueAt(row, 1);

            // Check if its in table
            if (tableName.equals(currentTableName) && fieldName.equals(currentFieldName)) {
                tableModel.removeRow(row);
                return;
            };
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableSelectorsPanel = new javax.swing.JPanel();
        fieldSelectorScrollPanel = new javax.swing.JScrollPane();
        fieldSelectorTable = new javax.swing.JTable();
        commandOutputScrollPanel = new javax.swing.JScrollPane();
        commandOutputTextPane = new javax.swing.JTextPane();
        generateCodeButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        tableSelectorsPanel.setLayout(new java.awt.GridLayout(2, 3));

        fieldSelectorTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fieldSelectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field Name", "Table", "Alias", "Condition"
            }
        ));
        fieldSelectorTable.setShowGrid(true);
        fieldSelectorScrollPanel.setViewportView(fieldSelectorTable);

        commandOutputTextPane.setEditable(false);
        commandOutputTextPane.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        commandOutputScrollPanel.setViewportView(commandOutputTextPane);

        generateCodeButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        generateCodeButton.setText("Generate Code");
        generateCodeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                generateCodeButtonMousePressed(evt);
            }
        });

        executeButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        executeButton.setText("Execute");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Select the fields from each table that you would like to keep!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandOutputScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tableSelectorsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldSelectorScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateCodeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(generateCodeButton)
                        .addComponent(executeButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableSelectorsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldSelectorScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandOutputScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateCodeButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateCodeButtonMousePressed
        // Build up SQL command
        StringBuilder commandBuilder = new StringBuilder("SELECT ");

        // Parse table and find all field names and aliases
        for(int row = 0; row < this.fieldSelectorTable.getRowCount(); ++row) {
            // Get field and table name
            String fieldName = (String) this.fieldSelectorTable.getValueAt(row, 0);
            String tableName = (String) this.fieldSelectorTable.getValueAt(row, 1);
            String aliasName = (String) this.fieldSelectorTable.getValueAt(row, 2);

            // If it has alias ad it
            String tableFieldName = tableName + '.' + fieldName;
            if (row == 0) {
                if (aliasName != null) commandBuilder.append(tableFieldName).append(" AS ").append(aliasName);
                else commandBuilder.append(tableFieldName);
            } else {
                if (aliasName != null) commandBuilder.append(", ").append(tableFieldName).append(" AS ").append(aliasName);
                else commandBuilder.append(", ").append(tableFieldName);
            }
        }
        commandBuilder.append('\n');

        // JOINS
        for(int row = 0; row < this.fieldSelectorTable.getRowCount(); ++row) {
            // Get field and table name
            String fieldName = (String) this.fieldSelectorTable.getValueAt(row, 0);
            String tableName = (String) this.fieldSelectorTable.getValueAt(row, 1);
            String aliasName = (String) this.fieldSelectorTable.getValueAt(row, 2);

            // If first row just append it
            if (row == 0) {
                commandBuilder.append("FROM ").append(tableName);
            } else {
                commandBuilder.append('\n');
            }
        }


        // Where conditions
        boolean hasWhere = false;
        for(int row = 0; row < this.fieldSelectorTable.getRowCount(); ++row) {
            // Get field and table name
            String fieldName = (String) this.fieldSelectorTable.getValueAt(row, 0);
            String condition = (String) this.fieldSelectorTable.getValueAt(row, 3);

            // If it has condition add where
            if (condition != null) {
                if (!hasWhere) commandBuilder.append("WHERE ");

                String conditionWithField = '(' + fieldName + ' ' + condition + ')';
                if (!hasWhere) {
                    commandBuilder.append(conditionWithField);
                } else {
                    // Else add AND
                    commandBuilder.append(" AND\n").append("      ").append(conditionWithField);
                }
                if (!hasWhere) hasWhere = true;
            }
        }


        // Set command output
        this.commandOutputTextPane.setText(commandBuilder.toString());
    }//GEN-LAST:event_generateCodeButtonMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane commandOutputScrollPanel;
    private javax.swing.JTextPane commandOutputTextPane;
    private javax.swing.JButton executeButton;
    private javax.swing.JScrollPane fieldSelectorScrollPanel;
    private javax.swing.JTable fieldSelectorTable;
    private javax.swing.JButton generateCodeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel tableSelectorsPanel;
    // End of variables declaration//GEN-END:variables
}
